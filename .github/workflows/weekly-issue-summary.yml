name: Weekly Issue Summary

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allow manual triggering

env:
  # Configurable labels to include in summary (based on GitHub samples reference)
  LABELS_TO_INCLUDE: 'bug,help wanted,triage,enhancement,question,documentation'
  # Destination for posting summary (discussion or slack)
  POST_TO_DISCUSSION: 'true'
  DISCUSSION_CATEGORY: 'General'

jobs:
  generate-summary:
    runs-on: ubuntu-latest
    permissions:
      issues: read
      discussions: write
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Issue Summary
        id: summary
        run: |
          echo "üìä **Weekly Issue Summary** - $(date -u +%Y-%m-%d)"
          echo ""
          echo "üìÖ **Period:** $(date -u -d '7 days ago' +%Y-%m-%d) to $(date -u +%Y-%m-%d)"
          echo ""
          
          # Get total issues count (simplified approach)
          echo "Fetching issue data..."
          
          # Get total open issues
          OPEN_ISSUES=$(gh issue list --state open --json number --jq 'length')
          echo "üìã **Open Issues:** $OPEN_ISSUES"
          
          # Get total closed issues
          CLOSED_ISSUES=$(gh issue list --state closed --json number --jq 'length')
          echo "‚úÖ **Closed Issues:** $CLOSED_ISSUES"
          
          # Get total issues
          TOTAL_ISSUES=$(gh issue list --state all --json number --jq 'length')
          echo "üìä **Total Issues:** $TOTAL_ISSUES"
          
          echo ""
          echo "üè∑Ô∏è **Issues by Label:**"
          
          # Split labels and process each
          IFS=',' read -ra LABELS <<< "$LABELS_TO_INCLUDE"
          for label in "${LABELS[@]}"; do
            # Trim whitespace
            label=$(echo "$label" | xargs)
            
            # Count open issues with this label
            OPEN_COUNT=$(gh issue list --state open --label "$label" --json number --jq 'length')
            
            # Count closed issues with this label
            CLOSED_COUNT=$(gh issue list --state closed --label "$label" --json number --jq 'length')
            
            if [ "$OPEN_COUNT" -gt 0 ] || [ "$CLOSED_COUNT" -gt 0 ]; then
              echo "- **$label:** $OPEN_COUNT open, $CLOSED_COUNT closed"
            fi
          done
          
          echo ""
          echo "üìà **Summary:**"
          echo "- Open issues: $OPEN_ISSUES"
          echo "- Closed issues: $CLOSED_ISSUES"
          echo "- Total issues: $TOTAL_ISSUES"
          
          # Calculate completion rate
          if [ $TOTAL_ISSUES -gt 0 ]; then
            COMPLETION_RATE=$(( (CLOSED_ISSUES * 100) / TOTAL_ISSUES ))
            echo "- Completion rate: $COMPLETION_RATE%"
          else
            echo "- Completion rate: N/A (no issues)"
          fi
          
          echo ""
          echo "üîó **View all issues:** [GitHub Issues](https://github.com/${{ github.repository }}/issues)"
          echo ""
          echo "---"
          echo "*This summary is automatically generated every Monday at 9 AM UTC*"
          
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Post to Discussion
        if: env.POST_TO_DISCUSSION == 'true'
        run: |
          # Create discussion title
          TITLE="üìä Weekly Issue Summary - $(date -u +%Y-%m-%d)"
          
          # Get basic issue counts
          OPEN_ISSUES=$(gh issue list --state open --json number --jq 'length')
          CLOSED_ISSUES=$(gh issue list --state closed --json number --jq 'length')
          TOTAL_ISSUES=$(gh issue list --state all --json number --jq 'length')
          
          # Create summary content
          SUMMARY_CONTENT="üìä **Weekly Issue Summary** - $(date -u +%Y-%m-%d)

üìÖ **Period:** $(date -u -d '7 days ago' +%Y-%m-%d) to $(date -u +%Y-%m-%d)

üìã **Open Issues:** $OPEN_ISSUES
‚úÖ **Closed Issues:** $CLOSED_ISSUES
üìä **Total Issues:** $TOTAL_ISSUES

üè∑Ô∏è **Issues by Label:**"

          # Add label breakdown
          IFS=',' read -ra LABELS <<< "$LABELS_TO_INCLUDE"
          for label in "${LABELS[@]}"; do
            label=$(echo "$label" | xargs)
            OPEN_COUNT=$(gh issue list --state open --label "$label" --json number --jq 'length')
            CLOSED_COUNT=$(gh issue list --state closed --label "$label" --json number --jq 'length')
            
            if [ "$OPEN_COUNT" -gt 0 ] || [ "$CLOSED_COUNT" -gt 0 ]; then
              SUMMARY_CONTENT="$SUMMARY_CONTENT
- **$label:** $OPEN_COUNT open, $CLOSED_COUNT closed"
            fi
          done
          
          # Calculate completion rate
          if [ $TOTAL_ISSUES -gt 0 ]; then
            COMPLETION_RATE=$(( (CLOSED_ISSUES * 100) / TOTAL_ISSUES ))
            SUMMARY_CONTENT="$SUMMARY_CONTENT

üìà **Summary:**
- Open issues: $OPEN_ISSUES
- Closed issues: $CLOSED_ISSUES
- Total issues: $TOTAL_ISSUES
- Completion rate: $COMPLETION_RATE%"
          else
            SUMMARY_CONTENT="$SUMMARY_CONTENT

üìà **Summary:**
- Open issues: $OPEN_ISSUES
- Closed issues: $CLOSED_ISSUES
- Total issues: $TOTAL_ISSUES
- Completion rate: N/A (no issues)"
          fi
          
          SUMMARY_CONTENT="$SUMMARY_CONTENT

üîó **View all issues:** [GitHub Issues](https://github.com/${{ github.repository }}/issues)

---
*This summary is automatically generated every Monday at 9 AM UTC*"
          
          # Post to discussion
          gh api graphql -f query='
          mutation($repositoryId: ID!, $title: String!, $body: String!, $categoryId: ID!) {
            createDiscussion(input: {
              repositoryId: $repositoryId,
              title: $title,
              body: $body,
              categoryId: $categoryId
            }) {
              discussion {
                id
                url
              }
            }
          }' -f repositoryId=$(gh api graphql -f query='query($owner: String!, $repo: String!) { repository(owner: $owner, name: $repo) { id } }' -f owner='${{ github.repository_owner }}' -f repo='${{ github.event.repository.name }}' --jq '.data.repository.id') -f title="$TITLE" -f body="$SUMMARY_CONTENT" -f categoryId=$(gh api graphql -f query='query($owner: String!, $repo: String!) { repository(owner: $owner, name: $repo) { discussionCategories(first: 10) { nodes { id name } } } }' -f owner='${{ github.repository_owner }}' -f repo='${{ github.event.repository.name }}' --jq '.data.repository.discussionCategories.nodes[] | select(.name == "General") | .id')
          
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Summary Artifact
        run: |
          # Get basic issue counts
          OPEN_ISSUES=$(gh issue list --state open --json number --jq 'length')
          CLOSED_ISSUES=$(gh issue list --state closed --json number --jq 'length')
          TOTAL_ISSUES=$(gh issue list --state all --json number --jq 'length')
          
          # Create markdown file
          echo "üìä Weekly Issue Summary - $(date -u +%Y-%m-%d)" > issue-summary.md
          echo "" >> issue-summary.md
          echo "üìÖ Period: $(date -u -d '7 days ago' +%Y-%m-%d) to $(date -u +%Y-%m-%d)" >> issue-summary.md
          echo "" >> issue-summary.md
          echo "üìã Open Issues: $OPEN_ISSUES" >> issue-summary.md
          echo "‚úÖ Closed Issues: $CLOSED_ISSUES" >> issue-summary.md
          echo "üìä Total Issues: $TOTAL_ISSUES" >> issue-summary.md
          echo "" >> issue-summary.md
          echo "üè∑Ô∏è Issues by Label:" >> issue-summary.md
          
          IFS=',' read -ra LABELS <<< "$LABELS_TO_INCLUDE"
          for label in "${LABELS[@]}"; do
            label=$(echo "$label" | xargs)
            OPEN_COUNT=$(gh issue list --state open --label "$label" --json number --jq 'length')
            CLOSED_COUNT=$(gh issue list --state closed --label "$label" --json number --jq 'length')
            
            if [ "$OPEN_COUNT" -gt 0 ] || [ "$CLOSED_COUNT" -gt 0 ]; then
              echo "- **$label:** $OPEN_COUNT open, $CLOSED_COUNT closed" >> issue-summary.md
            fi
          done
          
          # Add completion rate
          if [ $TOTAL_ISSUES -gt 0 ]; then
            COMPLETION_RATE=$(( (CLOSED_ISSUES * 100) / TOTAL_ISSUES ))
            echo "" >> issue-summary.md
            echo "üìà Summary:" >> issue-summary.md
            echo "- Completion rate: $COMPLETION_RATE%" >> issue-summary.md
          fi
          
          echo "" >> issue-summary.md
          echo "üîó View all issues: https://github.com/${{ github.repository }}/issues" >> issue-summary.md
          echo "" >> issue-summary.md
          echo "---" >> issue-summary.md
          echo "*This summary is automatically generated every Monday at 9 AM UTC*" >> issue-summary.md
          
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Summary Artifact
        uses: actions/upload-artifact@v4
        with:
          name: weekly-issue-summary
          path: issue-summary.md
          retention-days: 30
